#!/bin/sh

# This script initializes an AoC Cargo package with the following structure:
#
# |--Cargo.lock
# |--Cargo.toml
# |--src/
# |  |--lib.rs
# |--examples/
# |  |--day1/
# |     |--day1.rs
# |     |--data/
# |  |--day2/
# |     |--day2.rs
# |     |--data/
# ................
# |  |--day25/
# |     |--day25.rs
# |     |--data/
#
# Each day's solution will be placed into its own example.  Each example is a
# multifile directory to allow for additional files that do not need to be
# shared with other days.  Additionally, each example will have a data directory
# to hold input files for the day.
#
# Shared code (usable across all days) can be pulled out into modules under
# src/.  lib.rs, therefore exists purely to consolidate all modules into the
# single library that this crate exports.

# Parse the year
echo "Year? "
while read year; do
  if { test "$year" -ge 1000 && test "$year" -lt 10000; } 2> /dev/null; then
    break
  else
    echo "Please enter a valid 4 digit year."
  fi
done

project="aoc${year}"

# Add this new project to the workspace Cargo.toml.
sed -i "s/^]/  \"${project}\",\n]/g" Cargo.toml

# Create and the new cargo project.  This sets up the core structure of the
# crate, including the Cargo.lock file, Cargo.toml file, and src/lib.rs file.
cargo new --lib "${project}"

# Add prompter as a standard dependency to the crate.
echo 'prompter = { path = "../prompter" }' >> ${project}/Cargo.toml

# Finally, we want to create the examples directory and the structure within.
mkdir ${project}/examples
for i in $(seq 1 25); do
  mkdir ${project}/examples/day${i}
  touch ${project}/examples/day${i}/day.rs
  touch ${project}/examples/day${i}/main.rs
  touch ${project}/examples/day${i}/part1.txt
  touch ${project}/examples/day${i}/part2.txt
  # main boilerplate.
  cat << EOF > ${project}/examples/day${i}/main.rs
use prompter;

mod day;

static PART_ONE_INPUT: &'static str = include_str!("part1.txt");
static PART_TWO_INPUT: &'static str = include_str!("part2.txt");

fn main() {
    match prompter::prompter::<u8>("Which part? ") {
      1 => {
        println!("Part one results:");
        println!("{}", day::part_one(PART_ONE_INPUT));
      },
      2 => {
        println!("Part two results:");
        println!("{}", day::part_two(PART_TWO_INPUT));
      },
      _ => println!("Invalid input."),
    }
}
EOF

  # implementation and test skeleton
  cat << EOF > ${project}/examples/day${i}/day.rs
pub fn part_one(input: &str) -> i64 {
  println!("{}", input);
  0
}

pub fn part_two(input: &str) -> i64 {
  println!("{}", input);
  0
}

#[cfg(test)]
mod dayN_tests {
  use super::*;

  #[test]
  fn samples_part1() {
    assert_eq!(part_one(""), 0);
  }

  #[test]
  fn samples_part2() {
    assert_eq!(part_two(""), 0);
  }
}
EOF

  # replace dayN in the skeleton with the correct day number
  sed -i "s/dayN/day${i}/" ${project}/examples/day${i}/day.rs
done